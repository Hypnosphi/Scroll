// Generated by CoffeeScript 1.7.1
(function() {
  var interpolate;

  interpolate = function(a, b, degree) {
    return Math.floor(a + (b - a) * degree);
  };

  $(document).ready(function() {
    var colors, currentY, dims, position, view;
    dims = {
      update: function() {
        this.minScroll = view.$window.height();
        this.maxScroll = $(document).height() - 2 * this.minScroll;
        this.halfWidth = 0.2 * $('.slide_range').height();
        this.width = 2 * this.halfWidth;
        this.triangleHeight = this.halfWidth * Math.sqrt(3);
        this.triangleTop = this.halfWidth - this.triangleHeight / 2;
        this.triangleBottom = this.triangleTop + this.triangleHeight;
        view.resize();
        return this;
      }
    };
    position = {
      update: function(force) {
        var pos, scroll;
        scroll = view.$window.scrollTop();
        if (scroll < dims.minScroll) {
          scroll = dims.minScroll;
        } else if (scroll > dims.maxScroll) {
          scroll = dims.maxScroll;
        }
        pos = (scroll - dims.minScroll) / (dims.maxScroll - dims.minScroll);
        if (force || this.current !== pos) {
          this.current = pos;
          view.transform(this.current);
        }
        return this;
      }
    };
    colors = {
      top: [0, 0, 0],
      bottom: [0, 0, 0],
      reset: function(key) {
        var i, _i, _len, _ref;
        _ref = [0, 1, 2];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          this[key][i] = Math.floor(Math.random() * 256);
        }
        return this;
      }
    };
    view = {
      $window: $(window),
      $slider: $('.slider'),
      ctx: document.getElementById('figure').getContext('2d'),
      resize: function() {
        $('#figure').css({
          left: -dims.halfWidth,
          top: -dims.halfWidth
        }).attr({
          width: dims.width,
          height: dims.width
        });
        position.update(true);
        return this;
      },
      transform: function(state) {
        var color, i, r, xCenter, xLeft, xRight, yBottom, yCenter, yTop;
        if (state === 0) {
          colors.reset('bottom');
        } else if (state === 1) {
          colors.reset('top');
        }
        this.$slider.css('top', Math.floor(state * 100) + '%');
        color = (function() {
          var _i, _len, _ref, _results;
          _ref = [0, 1, 2];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(interpolate(colors.top[i], colors.bottom[i], state));
          }
          return _results;
        })();
        this.ctx.fillStyle = "rgb(" + (color.join(',')) + ")";
        this.ctx.clearRect(0, 0, dims.width, dims.width);
        this.ctx.beginPath();
        if (state <= 0.5) {
          state *= 2;
          xLeft = 0;
          xCenter = dims.halfWidth;
          xRight = dims.width;
          yTop = interpolate(0, dims.triangleTop, state);
          yCenter = interpolate(dims.halfWidth, dims.triangleBottom, state);
          yBottom = interpolate(dims.width, dims.triangleBottom, state);
          this.ctx.moveTo(xCenter, yTop);
          this.ctx.lineTo(xRight, yCenter);
          this.ctx.lineTo(xCenter, yBottom);
          this.ctx.lineTo(xLeft, yCenter);
          this.ctx.lineTo(xCenter, yTop);
        } else {
          state = 2 * state - 1;
          xLeft = interpolate(0, dims.halfWidth, state);
          xCenter = dims.halfWidth;
          xRight = interpolate(dims.width, dims.halfWidth, state);
          yTop = interpolate(dims.triangleTop, dims.halfWidth, state);
          yBottom = interpolate(dims.triangleBottom, dims.halfWidth, state);
          r = interpolate(0, dims.halfWidth, state);
          this.ctx.arc(xCenter, yTop, r, -5 * Math.PI / 6, -Math.PI / 6);
          this.ctx.arc(xRight, yBottom, r, -Math.PI / 6, Math.PI / 2);
          this.ctx.arc(xLeft, yBottom, r, Math.PI / 2, -5 * Math.PI / 6);
        }
        this.ctx.fill();
        return this;
      }
    };
    colors.reset('top');
    colors.reset('bottom');
    dims.update();
    view.$window.scroll(function() {
      return position.update();
    });
    view.$window.resize(function() {
      return dims.update();
    });
    window.scrollBy(0, 0);
    currentY = 0;
    document.addEventListener('touchstart', function(e) {
      return currentY = e.touches[0].clientY;
    });
    document.addEventListener('touchmove', function(e) {
      var newY;
      e.preventDefault();
      newY = e.touches[0].clientY;
      if (currentY) {
        window.scrollBy(0, -2 * (newY - currentY));
      }
      return currentY = newY;
    });
  });

}).call(this);
